package net.huansi.equipment.equipmentapp.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.huansi.equipment.equipmentapp.sqlite_db.RepairDetailInSQLite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REPAIR_DETAIL_IN_SQLITE".
*/
public class RepairDetailInSQLiteDao extends AbstractDao<RepairDetailInSQLite, Long> {

    public static final String TABLENAME = "REPAIR_DETAIL_IN_SQLITE";

    /**
     * Properties of entity RepairDetailInSQLite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HdrId = new Property(1, long.class, "hdrId", false, "HDR_ID");
        public final static Property ProjectName = new Property(2, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property ProjectID = new Property(3, String.class, "projectID", false, "PROJECT_ID");
        public final static Property Method = new Property(4, String.class, "method", false, "METHOD");
        public final static Property ResultName = new Property(5, String.class, "resultName", false, "RESULT_NAME");
        public final static Property ResultID = new Property(6, String.class, "resultID", false, "RESULT_ID");
        public final static Property RepairUserNo = new Property(7, String.class, "repairUserNo", false, "REPAIR_USER_NO");
        public final static Property Remark = new Property(8, String.class, "remark", false, "REMARK");
    }


    public RepairDetailInSQLiteDao(DaoConfig config) {
        super(config);
    }
    
    public RepairDetailInSQLiteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REPAIR_DETAIL_IN_SQLITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"HDR_ID\" INTEGER NOT NULL ," + // 1: hdrId
                "\"PROJECT_NAME\" TEXT," + // 2: projectName
                "\"PROJECT_ID\" TEXT," + // 3: projectID
                "\"METHOD\" TEXT," + // 4: method
                "\"RESULT_NAME\" TEXT," + // 5: resultName
                "\"RESULT_ID\" TEXT," + // 6: resultID
                "\"REPAIR_USER_NO\" TEXT," + // 7: repairUserNo
                "\"REMARK\" TEXT);"); // 8: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REPAIR_DETAIL_IN_SQLITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RepairDetailInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getHdrId());
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(3, projectName);
        }
 
        String projectID = entity.getProjectID();
        if (projectID != null) {
            stmt.bindString(4, projectID);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(5, method);
        }
 
        String resultName = entity.getResultName();
        if (resultName != null) {
            stmt.bindString(6, resultName);
        }
 
        String resultID = entity.getResultID();
        if (resultID != null) {
            stmt.bindString(7, resultID);
        }
 
        String repairUserNo = entity.getRepairUserNo();
        if (repairUserNo != null) {
            stmt.bindString(8, repairUserNo);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RepairDetailInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getHdrId());
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(3, projectName);
        }
 
        String projectID = entity.getProjectID();
        if (projectID != null) {
            stmt.bindString(4, projectID);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(5, method);
        }
 
        String resultName = entity.getResultName();
        if (resultName != null) {
            stmt.bindString(6, resultName);
        }
 
        String resultID = entity.getResultID();
        if (resultID != null) {
            stmt.bindString(7, resultID);
        }
 
        String repairUserNo = entity.getRepairUserNo();
        if (repairUserNo != null) {
            stmt.bindString(8, repairUserNo);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RepairDetailInSQLite readEntity(Cursor cursor, int offset) {
        RepairDetailInSQLite entity = new RepairDetailInSQLite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // hdrId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // projectName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // projectID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // method
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // resultName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // resultID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // repairUserNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RepairDetailInSQLite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHdrId(cursor.getLong(offset + 1));
        entity.setProjectName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProjectID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMethod(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setResultName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setResultID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRepairUserNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRemark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RepairDetailInSQLite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RepairDetailInSQLite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RepairDetailInSQLite entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
