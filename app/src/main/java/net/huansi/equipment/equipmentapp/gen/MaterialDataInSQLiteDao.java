package net.huansi.equipment.equipmentapp.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.huansi.equipment.equipmentapp.sqlite_db.MaterialDataInSQLite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MATERIAL_DATA_IN_SQLITE".
*/
public class MaterialDataInSQLiteDao extends AbstractDao<MaterialDataInSQLite, Long> {

    public static final String TABLENAME = "MATERIAL_DATA_IN_SQLITE";

    /**
     * Properties of entity MaterialDataInSQLite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Barcode = new Property(1, String.class, "barcode", false, "BARCODE");
        public final static Property CustomerName = new Property(2, String.class, "customerName", false, "CUSTOMER_NAME");
        public final static Property Sn = new Property(3, String.class, "sn", false, "SN");
        public final static Property FepoQuantity = new Property(4, String.class, "fepoQuantity", false, "FEPO_QUANTITY");
        public final static Property MaterialCode = new Property(5, String.class, "materialCode", false, "MATERIAL_CODE");
        public final static Property MaterialName = new Property(6, String.class, "materialName", false, "MATERIAL_NAME");
        public final static Property MaterialID = new Property(7, String.class, "materialID", false, "MATERIAL_ID");
        public final static Property ColorCode = new Property(8, String.class, "colorCode", false, "COLOR_CODE");
        public final static Property ColorName = new Property(9, String.class, "colorName", false, "COLOR_NAME");
        public final static Property Quantity = new Property(10, String.class, "quantity", false, "QUANTITY");
        public final static Property QuantityPs = new Property(11, String.class, "quantityPs", false, "QUANTITY_PS");
        public final static Property QuantityPsRaw = new Property(12, String.class, "quantityPsRaw", false, "QUANTITY_PS_RAW");
        public final static Property Vatno = new Property(13, String.class, "vatno", false, "VATNO");
        public final static Property Pno = new Property(14, String.class, "pno", false, "PNO");
        public final static Property CheckStatus = new Property(15, String.class, "checkStatus", false, "CHECK_STATUS");
        public final static Property BarcodeTtlNum = new Property(16, String.class, "barcodeTtlNum", false, "BARCODE_TTL_NUM");
        public final static Property CheckedttNum = new Property(17, String.class, "checkedttNum", false, "CHECKEDTT_NUM");
        public final static Property UnCheckedNum = new Property(18, String.class, "unCheckedNum", false, "UN_CHECKED_NUM");
        public final static Property Exemption = new Property(19, String.class, "exemption", false, "EXEMPTION");
        public final static Property IsMatchErpPo = new Property(20, String.class, "isMatchErpPo", false, "IS_MATCH_ERP_PO");
    }


    public MaterialDataInSQLiteDao(DaoConfig config) {
        super(config);
    }
    
    public MaterialDataInSQLiteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MATERIAL_DATA_IN_SQLITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BARCODE\" TEXT," + // 1: barcode
                "\"CUSTOMER_NAME\" TEXT," + // 2: customerName
                "\"SN\" TEXT," + // 3: sn
                "\"FEPO_QUANTITY\" TEXT," + // 4: fepoQuantity
                "\"MATERIAL_CODE\" TEXT," + // 5: materialCode
                "\"MATERIAL_NAME\" TEXT," + // 6: materialName
                "\"MATERIAL_ID\" TEXT," + // 7: materialID
                "\"COLOR_CODE\" TEXT," + // 8: colorCode
                "\"COLOR_NAME\" TEXT," + // 9: colorName
                "\"QUANTITY\" TEXT," + // 10: quantity
                "\"QUANTITY_PS\" TEXT," + // 11: quantityPs
                "\"QUANTITY_PS_RAW\" TEXT," + // 12: quantityPsRaw
                "\"VATNO\" TEXT," + // 13: vatno
                "\"PNO\" TEXT," + // 14: pno
                "\"CHECK_STATUS\" TEXT," + // 15: checkStatus
                "\"BARCODE_TTL_NUM\" TEXT," + // 16: barcodeTtlNum
                "\"CHECKEDTT_NUM\" TEXT," + // 17: checkedttNum
                "\"UN_CHECKED_NUM\" TEXT," + // 18: unCheckedNum
                "\"EXEMPTION\" TEXT," + // 19: exemption
                "\"IS_MATCH_ERP_PO\" TEXT);"); // 20: isMatchErpPo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MATERIAL_DATA_IN_SQLITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MaterialDataInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(2, barcode);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(3, customerName);
        }
 
        String sn = entity.getSn();
        if (sn != null) {
            stmt.bindString(4, sn);
        }
 
        String fepoQuantity = entity.getFepoQuantity();
        if (fepoQuantity != null) {
            stmt.bindString(5, fepoQuantity);
        }
 
        String materialCode = entity.getMaterialCode();
        if (materialCode != null) {
            stmt.bindString(6, materialCode);
        }
 
        String materialName = entity.getMaterialName();
        if (materialName != null) {
            stmt.bindString(7, materialName);
        }
 
        String materialID = entity.getMaterialID();
        if (materialID != null) {
            stmt.bindString(8, materialID);
        }
 
        String colorCode = entity.getColorCode();
        if (colorCode != null) {
            stmt.bindString(9, colorCode);
        }
 
        String colorName = entity.getColorName();
        if (colorName != null) {
            stmt.bindString(10, colorName);
        }
 
        String quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindString(11, quantity);
        }
 
        String quantityPs = entity.getQuantityPs();
        if (quantityPs != null) {
            stmt.bindString(12, quantityPs);
        }
 
        String quantityPsRaw = entity.getQuantityPsRaw();
        if (quantityPsRaw != null) {
            stmt.bindString(13, quantityPsRaw);
        }
 
        String vatno = entity.getVatno();
        if (vatno != null) {
            stmt.bindString(14, vatno);
        }
 
        String pno = entity.getPno();
        if (pno != null) {
            stmt.bindString(15, pno);
        }
 
        String checkStatus = entity.getCheckStatus();
        if (checkStatus != null) {
            stmt.bindString(16, checkStatus);
        }
 
        String barcodeTtlNum = entity.getBarcodeTtlNum();
        if (barcodeTtlNum != null) {
            stmt.bindString(17, barcodeTtlNum);
        }
 
        String checkedttNum = entity.getCheckedttNum();
        if (checkedttNum != null) {
            stmt.bindString(18, checkedttNum);
        }
 
        String unCheckedNum = entity.getUnCheckedNum();
        if (unCheckedNum != null) {
            stmt.bindString(19, unCheckedNum);
        }
 
        String exemption = entity.getExemption();
        if (exemption != null) {
            stmt.bindString(20, exemption);
        }
 
        String isMatchErpPo = entity.getIsMatchErpPo();
        if (isMatchErpPo != null) {
            stmt.bindString(21, isMatchErpPo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MaterialDataInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(2, barcode);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(3, customerName);
        }
 
        String sn = entity.getSn();
        if (sn != null) {
            stmt.bindString(4, sn);
        }
 
        String fepoQuantity = entity.getFepoQuantity();
        if (fepoQuantity != null) {
            stmt.bindString(5, fepoQuantity);
        }
 
        String materialCode = entity.getMaterialCode();
        if (materialCode != null) {
            stmt.bindString(6, materialCode);
        }
 
        String materialName = entity.getMaterialName();
        if (materialName != null) {
            stmt.bindString(7, materialName);
        }
 
        String materialID = entity.getMaterialID();
        if (materialID != null) {
            stmt.bindString(8, materialID);
        }
 
        String colorCode = entity.getColorCode();
        if (colorCode != null) {
            stmt.bindString(9, colorCode);
        }
 
        String colorName = entity.getColorName();
        if (colorName != null) {
            stmt.bindString(10, colorName);
        }
 
        String quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindString(11, quantity);
        }
 
        String quantityPs = entity.getQuantityPs();
        if (quantityPs != null) {
            stmt.bindString(12, quantityPs);
        }
 
        String quantityPsRaw = entity.getQuantityPsRaw();
        if (quantityPsRaw != null) {
            stmt.bindString(13, quantityPsRaw);
        }
 
        String vatno = entity.getVatno();
        if (vatno != null) {
            stmt.bindString(14, vatno);
        }
 
        String pno = entity.getPno();
        if (pno != null) {
            stmt.bindString(15, pno);
        }
 
        String checkStatus = entity.getCheckStatus();
        if (checkStatus != null) {
            stmt.bindString(16, checkStatus);
        }
 
        String barcodeTtlNum = entity.getBarcodeTtlNum();
        if (barcodeTtlNum != null) {
            stmt.bindString(17, barcodeTtlNum);
        }
 
        String checkedttNum = entity.getCheckedttNum();
        if (checkedttNum != null) {
            stmt.bindString(18, checkedttNum);
        }
 
        String unCheckedNum = entity.getUnCheckedNum();
        if (unCheckedNum != null) {
            stmt.bindString(19, unCheckedNum);
        }
 
        String exemption = entity.getExemption();
        if (exemption != null) {
            stmt.bindString(20, exemption);
        }
 
        String isMatchErpPo = entity.getIsMatchErpPo();
        if (isMatchErpPo != null) {
            stmt.bindString(21, isMatchErpPo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MaterialDataInSQLite readEntity(Cursor cursor, int offset) {
        MaterialDataInSQLite entity = new MaterialDataInSQLite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // barcode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // customerName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sn
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fepoQuantity
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // materialCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // materialName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // materialID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // colorCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // colorName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // quantity
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // quantityPs
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // quantityPsRaw
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // vatno
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // pno
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // checkStatus
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // barcodeTtlNum
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // checkedttNum
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // unCheckedNum
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // exemption
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // isMatchErpPo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MaterialDataInSQLite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBarcode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCustomerName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFepoQuantity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMaterialCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMaterialName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMaterialID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setColorCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setColorName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setQuantity(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setQuantityPs(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setQuantityPsRaw(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVatno(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPno(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCheckStatus(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBarcodeTtlNum(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCheckedttNum(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUnCheckedNum(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setExemption(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIsMatchErpPo(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MaterialDataInSQLite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MaterialDataInSQLite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MaterialDataInSQLite entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
