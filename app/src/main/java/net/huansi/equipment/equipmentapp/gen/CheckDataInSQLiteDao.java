package net.huansi.equipment.equipmentapp.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.huansi.equipment.equipmentapp.sqlite_db.CheckDataInSQLite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_DATA_IN_SQLITE".
*/
public class CheckDataInSQLiteDao extends AbstractDao<CheckDataInSQLite, Long> {

    public static final String TABLENAME = "CHECK_DATA_IN_SQLITE";

    /**
     * Properties of entity CheckDataInSQLite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EquipmentDetailID = new Property(1, String.class, "equipmentDetailID", false, "EQUIPMENT_DETAIL_ID");
        public final static Property InFactoryDate = new Property(2, String.class, "inFactoryDate", false, "IN_FACTORY_DATE");
        public final static Property AssetsCode = new Property(3, String.class, "assetsCode", false, "ASSETS_CODE");
        public final static Property OutFactoryCode = new Property(4, String.class, "outFactoryCode", false, "OUT_FACTORY_CODE");
        public final static Property DepreciationStartingDate = new Property(5, String.class, "depreciationStartingDate", false, "DEPRECIATION_STARTING_DATE");
        public final static Property CostCenter = new Property(6, String.class, "costCenter", false, "COST_CENTER");
        public final static Property DeclarationNum = new Property(7, String.class, "declarationNum", false, "DECLARATION_NUM");
        public final static Property EquipmentName = new Property(8, String.class, "equipmentName", false, "EQUIPMENT_NAME");
        public final static Property Brand = new Property(9, String.class, "brand", false, "BRAND");
        public final static Property Model = new Property(10, String.class, "model", false, "MODEL");
        public final static Property RFID = new Property(11, String.class, "RFID", false, "RFID");
        public final static Property UserNo = new Property(12, String.class, "userNo", false, "USER_NO");
        public final static Property Status = new Property(13, int.class, "status", false, "STATUS");
    }


    public CheckDataInSQLiteDao(DaoConfig config) {
        super(config);
    }
    
    public CheckDataInSQLiteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_DATA_IN_SQLITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EQUIPMENT_DETAIL_ID\" TEXT," + // 1: equipmentDetailID
                "\"IN_FACTORY_DATE\" TEXT," + // 2: inFactoryDate
                "\"ASSETS_CODE\" TEXT," + // 3: assetsCode
                "\"OUT_FACTORY_CODE\" TEXT," + // 4: outFactoryCode
                "\"DEPRECIATION_STARTING_DATE\" TEXT," + // 5: depreciationStartingDate
                "\"COST_CENTER\" TEXT," + // 6: costCenter
                "\"DECLARATION_NUM\" TEXT," + // 7: declarationNum
                "\"EQUIPMENT_NAME\" TEXT," + // 8: equipmentName
                "\"BRAND\" TEXT," + // 9: brand
                "\"MODEL\" TEXT," + // 10: model
                "\"RFID\" TEXT," + // 11: RFID
                "\"USER_NO\" TEXT," + // 12: userNo
                "\"STATUS\" INTEGER NOT NULL );"); // 13: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_DATA_IN_SQLITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckDataInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String equipmentDetailID = entity.getEquipmentDetailID();
        if (equipmentDetailID != null) {
            stmt.bindString(2, equipmentDetailID);
        }
 
        String inFactoryDate = entity.getInFactoryDate();
        if (inFactoryDate != null) {
            stmt.bindString(3, inFactoryDate);
        }
 
        String assetsCode = entity.getAssetsCode();
        if (assetsCode != null) {
            stmt.bindString(4, assetsCode);
        }
 
        String outFactoryCode = entity.getOutFactoryCode();
        if (outFactoryCode != null) {
            stmt.bindString(5, outFactoryCode);
        }
 
        String depreciationStartingDate = entity.getDepreciationStartingDate();
        if (depreciationStartingDate != null) {
            stmt.bindString(6, depreciationStartingDate);
        }
 
        String costCenter = entity.getCostCenter();
        if (costCenter != null) {
            stmt.bindString(7, costCenter);
        }
 
        String declarationNum = entity.getDeclarationNum();
        if (declarationNum != null) {
            stmt.bindString(8, declarationNum);
        }
 
        String equipmentName = entity.getEquipmentName();
        if (equipmentName != null) {
            stmt.bindString(9, equipmentName);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(10, brand);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(11, model);
        }
 
        String RFID = entity.getRFID();
        if (RFID != null) {
            stmt.bindString(12, RFID);
        }
 
        String userNo = entity.getUserNo();
        if (userNo != null) {
            stmt.bindString(13, userNo);
        }
        stmt.bindLong(14, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckDataInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String equipmentDetailID = entity.getEquipmentDetailID();
        if (equipmentDetailID != null) {
            stmt.bindString(2, equipmentDetailID);
        }
 
        String inFactoryDate = entity.getInFactoryDate();
        if (inFactoryDate != null) {
            stmt.bindString(3, inFactoryDate);
        }
 
        String assetsCode = entity.getAssetsCode();
        if (assetsCode != null) {
            stmt.bindString(4, assetsCode);
        }
 
        String outFactoryCode = entity.getOutFactoryCode();
        if (outFactoryCode != null) {
            stmt.bindString(5, outFactoryCode);
        }
 
        String depreciationStartingDate = entity.getDepreciationStartingDate();
        if (depreciationStartingDate != null) {
            stmt.bindString(6, depreciationStartingDate);
        }
 
        String costCenter = entity.getCostCenter();
        if (costCenter != null) {
            stmt.bindString(7, costCenter);
        }
 
        String declarationNum = entity.getDeclarationNum();
        if (declarationNum != null) {
            stmt.bindString(8, declarationNum);
        }
 
        String equipmentName = entity.getEquipmentName();
        if (equipmentName != null) {
            stmt.bindString(9, equipmentName);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(10, brand);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(11, model);
        }
 
        String RFID = entity.getRFID();
        if (RFID != null) {
            stmt.bindString(12, RFID);
        }
 
        String userNo = entity.getUserNo();
        if (userNo != null) {
            stmt.bindString(13, userNo);
        }
        stmt.bindLong(14, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CheckDataInSQLite readEntity(Cursor cursor, int offset) {
        CheckDataInSQLite entity = new CheckDataInSQLite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // equipmentDetailID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // inFactoryDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // assetsCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // outFactoryCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // depreciationStartingDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // costCenter
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // declarationNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // equipmentName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // brand
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // model
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // RFID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // userNo
            cursor.getInt(offset + 13) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckDataInSQLite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEquipmentDetailID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInFactoryDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAssetsCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOutFactoryCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDepreciationStartingDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCostCenter(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeclarationNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEquipmentName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBrand(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setModel(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRFID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUserNo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStatus(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CheckDataInSQLite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CheckDataInSQLite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CheckDataInSQLite entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
