package net.huansi.equipment.equipmentapp.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.huansi.equipment.equipmentapp.sqlite_db.Inventory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVENTORY".
*/
public class InventoryDao extends AbstractDao<Inventory, Long> {

    public static final String TABLENAME = "INVENTORY";

    /**
     * Properties of entity Inventory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Factory = new Property(1, String.class, "factory", false, "FACTORY");
        public final static Property CreateUserNo = new Property(2, String.class, "createUserNo", false, "CREATE_USER_NO");
        public final static Property InventoryUserNo = new Property(3, String.class, "inventoryUserNo", false, "INVENTORY_USER_NO");
        public final static Property CreateTime = new Property(4, String.class, "createTime", false, "CREATE_TIME");
    }


    public InventoryDao(DaoConfig config) {
        super(config);
    }
    
    public InventoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVENTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FACTORY\" TEXT," + // 1: factory
                "\"CREATE_USER_NO\" TEXT," + // 2: createUserNo
                "\"INVENTORY_USER_NO\" TEXT," + // 3: inventoryUserNo
                "\"CREATE_TIME\" TEXT);"); // 4: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVENTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Inventory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String factory = entity.getFactory();
        if (factory != null) {
            stmt.bindString(2, factory);
        }
 
        String createUserNo = entity.getCreateUserNo();
        if (createUserNo != null) {
            stmt.bindString(3, createUserNo);
        }
 
        String inventoryUserNo = entity.getInventoryUserNo();
        if (inventoryUserNo != null) {
            stmt.bindString(4, inventoryUserNo);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Inventory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String factory = entity.getFactory();
        if (factory != null) {
            stmt.bindString(2, factory);
        }
 
        String createUserNo = entity.getCreateUserNo();
        if (createUserNo != null) {
            stmt.bindString(3, createUserNo);
        }
 
        String inventoryUserNo = entity.getInventoryUserNo();
        if (inventoryUserNo != null) {
            stmt.bindString(4, inventoryUserNo);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Inventory readEntity(Cursor cursor, int offset) {
        Inventory entity = new Inventory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // factory
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createUserNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // inventoryUserNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Inventory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFactory(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateUserNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInventoryUserNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Inventory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Inventory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Inventory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
