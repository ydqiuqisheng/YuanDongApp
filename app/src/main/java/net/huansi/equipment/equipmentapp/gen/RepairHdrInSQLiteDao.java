package net.huansi.equipment.equipmentapp.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.huansi.equipment.equipmentapp.sqlite_db.RepairHdrInSQLite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REPAIR_HDR_IN_SQLITE".
*/
public class RepairHdrInSQLiteDao extends AbstractDao<RepairHdrInSQLite, Long> {

    public static final String TABLENAME = "REPAIR_HDR_IN_SQLITE";

    /**
     * Properties of entity RepairHdrInSQLite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RepairPlanHdrId = new Property(1, String.class, "repairPlanHdrId", false, "REPAIR_PLAN_HDR_ID");
        public final static Property EquipmentId = new Property(2, String.class, "equipmentId", false, "EQUIPMENT_ID");
        public final static Property EquipmentName = new Property(3, String.class, "equipmentName", false, "EQUIPMENT_NAME");
        public final static Property CostCenter = new Property(4, String.class, "costCenter", false, "COST_CENTER");
        public final static Property EPCode = new Property(5, String.class, "EPCode", false, "EPCODE");
        public final static Property OutOfCode = new Property(6, String.class, "outOfCode", false, "OUT_OF_CODE");
        public final static Property EquipmentModel = new Property(7, String.class, "equipmentModel", false, "EQUIPMENT_MODEL");
        public final static Property AssetsCode = new Property(8, String.class, "assetsCode", false, "ASSETS_CODE");
        public final static Property Remark = new Property(9, String.class, "remark", false, "REMARK");
        public final static Property CreateTime = new Property(10, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property RepairTime = new Property(11, Long.class, "repairTime", false, "REPAIR_TIME");
        public final static Property CallRepairItemId = new Property(12, String.class, "callRepairItemId", false, "CALL_REPAIR_ITEM_ID");
        public final static Property CallRepairRecord = new Property(13, String.class, "callRepairRecord", false, "CALL_REPAIR_RECORD");
        public final static Property CallRepairGroup = new Property(14, String.class, "callRepairGroup", false, "CALL_REPAIR_GROUP");
        public final static Property CallRepairGroupId = new Property(15, String.class, "callRepairGroupId", false, "CALL_REPAIR_GROUP_ID");
        public final static Property SubmitStatus = new Property(16, int.class, "submitStatus", false, "SUBMIT_STATUS");
        public final static Property PathList = new Property(17, String.class, "pathList", false, "PATH_LIST");
    }


    public RepairHdrInSQLiteDao(DaoConfig config) {
        super(config);
    }
    
    public RepairHdrInSQLiteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REPAIR_HDR_IN_SQLITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"REPAIR_PLAN_HDR_ID\" TEXT," + // 1: repairPlanHdrId
                "\"EQUIPMENT_ID\" TEXT," + // 2: equipmentId
                "\"EQUIPMENT_NAME\" TEXT," + // 3: equipmentName
                "\"COST_CENTER\" TEXT," + // 4: costCenter
                "\"EPCODE\" TEXT," + // 5: EPCode
                "\"OUT_OF_CODE\" TEXT," + // 6: outOfCode
                "\"EQUIPMENT_MODEL\" TEXT," + // 7: equipmentModel
                "\"ASSETS_CODE\" TEXT," + // 8: assetsCode
                "\"REMARK\" TEXT," + // 9: remark
                "\"CREATE_TIME\" INTEGER," + // 10: createTime
                "\"REPAIR_TIME\" INTEGER," + // 11: repairTime
                "\"CALL_REPAIR_ITEM_ID\" TEXT," + // 12: callRepairItemId
                "\"CALL_REPAIR_RECORD\" TEXT," + // 13: callRepairRecord
                "\"CALL_REPAIR_GROUP\" TEXT," + // 14: callRepairGroup
                "\"CALL_REPAIR_GROUP_ID\" TEXT," + // 15: callRepairGroupId
                "\"SUBMIT_STATUS\" INTEGER NOT NULL ," + // 16: submitStatus
                "\"PATH_LIST\" TEXT);"); // 17: pathList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REPAIR_HDR_IN_SQLITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RepairHdrInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String repairPlanHdrId = entity.getRepairPlanHdrId();
        if (repairPlanHdrId != null) {
            stmt.bindString(2, repairPlanHdrId);
        }
 
        String equipmentId = entity.getEquipmentId();
        if (equipmentId != null) {
            stmt.bindString(3, equipmentId);
        }
 
        String equipmentName = entity.getEquipmentName();
        if (equipmentName != null) {
            stmt.bindString(4, equipmentName);
        }
 
        String costCenter = entity.getCostCenter();
        if (costCenter != null) {
            stmt.bindString(5, costCenter);
        }
 
        String EPCode = entity.getEPCode();
        if (EPCode != null) {
            stmt.bindString(6, EPCode);
        }
 
        String outOfCode = entity.getOutOfCode();
        if (outOfCode != null) {
            stmt.bindString(7, outOfCode);
        }
 
        String equipmentModel = entity.getEquipmentModel();
        if (equipmentModel != null) {
            stmt.bindString(8, equipmentModel);
        }
 
        String assetsCode = entity.getAssetsCode();
        if (assetsCode != null) {
            stmt.bindString(9, assetsCode);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(11, createTime);
        }
 
        Long repairTime = entity.getRepairTime();
        if (repairTime != null) {
            stmt.bindLong(12, repairTime);
        }
 
        String callRepairItemId = entity.getCallRepairItemId();
        if (callRepairItemId != null) {
            stmt.bindString(13, callRepairItemId);
        }
 
        String callRepairRecord = entity.getCallRepairRecord();
        if (callRepairRecord != null) {
            stmt.bindString(14, callRepairRecord);
        }
 
        String callRepairGroup = entity.getCallRepairGroup();
        if (callRepairGroup != null) {
            stmt.bindString(15, callRepairGroup);
        }
 
        String callRepairGroupId = entity.getCallRepairGroupId();
        if (callRepairGroupId != null) {
            stmt.bindString(16, callRepairGroupId);
        }
        stmt.bindLong(17, entity.getSubmitStatus());
 
        String pathList = entity.getPathList();
        if (pathList != null) {
            stmt.bindString(18, pathList);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RepairHdrInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String repairPlanHdrId = entity.getRepairPlanHdrId();
        if (repairPlanHdrId != null) {
            stmt.bindString(2, repairPlanHdrId);
        }
 
        String equipmentId = entity.getEquipmentId();
        if (equipmentId != null) {
            stmt.bindString(3, equipmentId);
        }
 
        String equipmentName = entity.getEquipmentName();
        if (equipmentName != null) {
            stmt.bindString(4, equipmentName);
        }
 
        String costCenter = entity.getCostCenter();
        if (costCenter != null) {
            stmt.bindString(5, costCenter);
        }
 
        String EPCode = entity.getEPCode();
        if (EPCode != null) {
            stmt.bindString(6, EPCode);
        }
 
        String outOfCode = entity.getOutOfCode();
        if (outOfCode != null) {
            stmt.bindString(7, outOfCode);
        }
 
        String equipmentModel = entity.getEquipmentModel();
        if (equipmentModel != null) {
            stmt.bindString(8, equipmentModel);
        }
 
        String assetsCode = entity.getAssetsCode();
        if (assetsCode != null) {
            stmt.bindString(9, assetsCode);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(11, createTime);
        }
 
        Long repairTime = entity.getRepairTime();
        if (repairTime != null) {
            stmt.bindLong(12, repairTime);
        }
 
        String callRepairItemId = entity.getCallRepairItemId();
        if (callRepairItemId != null) {
            stmt.bindString(13, callRepairItemId);
        }
 
        String callRepairRecord = entity.getCallRepairRecord();
        if (callRepairRecord != null) {
            stmt.bindString(14, callRepairRecord);
        }
 
        String callRepairGroup = entity.getCallRepairGroup();
        if (callRepairGroup != null) {
            stmt.bindString(15, callRepairGroup);
        }
 
        String callRepairGroupId = entity.getCallRepairGroupId();
        if (callRepairGroupId != null) {
            stmt.bindString(16, callRepairGroupId);
        }
        stmt.bindLong(17, entity.getSubmitStatus());
 
        String pathList = entity.getPathList();
        if (pathList != null) {
            stmt.bindString(18, pathList);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RepairHdrInSQLite readEntity(Cursor cursor, int offset) {
        RepairHdrInSQLite entity = new RepairHdrInSQLite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // repairPlanHdrId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // equipmentId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // equipmentName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // costCenter
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // EPCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // outOfCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // equipmentModel
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // assetsCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // remark
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // createTime
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // repairTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // callRepairItemId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // callRepairRecord
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // callRepairGroup
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // callRepairGroupId
            cursor.getInt(offset + 16), // submitStatus
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // pathList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RepairHdrInSQLite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRepairPlanHdrId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEquipmentId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEquipmentName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCostCenter(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEPCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOutOfCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEquipmentModel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAssetsCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreateTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setRepairTime(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setCallRepairItemId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCallRepairRecord(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCallRepairGroup(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCallRepairGroupId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSubmitStatus(cursor.getInt(offset + 16));
        entity.setPathList(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RepairHdrInSQLite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RepairHdrInSQLite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RepairHdrInSQLite entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
