package net.huansi.equipment.equipmentapp.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.huansi.equipment.equipmentapp.sqlite_db.InventoryDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVENTORY_DETAIL".
*/
public class InventoryDetailDao extends AbstractDao<InventoryDetail, Long> {

    public static final String TABLENAME = "INVENTORY_DETAIL";

    /**
     * Properties of entity InventoryDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property InventoryHdrIdInSQLite = new Property(1, long.class, "inventoryHdrIdInSQLite", false, "INVENTORY_HDR_ID_IN_SQLITE");
        public final static Property Area = new Property(2, String.class, "area", false, "AREA");
        public final static Property InventoryParentId = new Property(3, String.class, "inventoryParentId", false, "INVENTORY_PARENT_ID");
        public final static Property EquipmentParentId = new Property(4, String.class, "equipmentParentId", false, "EQUIPMENT_PARENT_ID");
        public final static Property EquipmentChildId = new Property(5, String.class, "equipmentChildId", false, "EQUIPMENT_CHILD_ID");
        public final static Property InFactoryDate = new Property(6, String.class, "inFactoryDate", false, "IN_FACTORY_DATE");
        public final static Property AssetsCode = new Property(7, String.class, "assetsCode", false, "ASSETS_CODE");
        public final static Property OutFactoryCode = new Property(8, String.class, "outFactoryCode", false, "OUT_FACTORY_CODE");
        public final static Property DepreciationStartingDate = new Property(9, String.class, "depreciationStartingDate", false, "DEPRECIATION_STARTING_DATE");
        public final static Property CostCenter = new Property(10, String.class, "costCenter", false, "COST_CENTER");
        public final static Property DeclarationNum = new Property(11, String.class, "declarationNum", false, "DECLARATION_NUM");
        public final static Property EPCode = new Property(12, String.class, "EPCode", false, "EPCODE");
        public final static Property Factory = new Property(13, String.class, "factory", false, "FACTORY");
        public final static Property EquipmentName = new Property(14, String.class, "equipmentName", false, "EQUIPMENT_NAME");
        public final static Property Status = new Property(15, int.class, "status", false, "STATUS");
        public final static Property ScanTime = new Property(16, String.class, "scanTime", false, "SCAN_TIME");
    }


    public InventoryDetailDao(DaoConfig config) {
        super(config);
    }
    
    public InventoryDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVENTORY_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INVENTORY_HDR_ID_IN_SQLITE\" INTEGER NOT NULL ," + // 1: inventoryHdrIdInSQLite
                "\"AREA\" TEXT," + // 2: area
                "\"INVENTORY_PARENT_ID\" TEXT," + // 3: inventoryParentId
                "\"EQUIPMENT_PARENT_ID\" TEXT," + // 4: equipmentParentId
                "\"EQUIPMENT_CHILD_ID\" TEXT," + // 5: equipmentChildId
                "\"IN_FACTORY_DATE\" TEXT," + // 6: inFactoryDate
                "\"ASSETS_CODE\" TEXT," + // 7: assetsCode
                "\"OUT_FACTORY_CODE\" TEXT," + // 8: outFactoryCode
                "\"DEPRECIATION_STARTING_DATE\" TEXT," + // 9: depreciationStartingDate
                "\"COST_CENTER\" TEXT," + // 10: costCenter
                "\"DECLARATION_NUM\" TEXT," + // 11: declarationNum
                "\"EPCODE\" TEXT," + // 12: EPCode
                "\"FACTORY\" TEXT," + // 13: factory
                "\"EQUIPMENT_NAME\" TEXT," + // 14: equipmentName
                "\"STATUS\" INTEGER NOT NULL ," + // 15: status
                "\"SCAN_TIME\" TEXT);"); // 16: scanTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVENTORY_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InventoryDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getInventoryHdrIdInSQLite());
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(3, area);
        }
 
        String inventoryParentId = entity.getInventoryParentId();
        if (inventoryParentId != null) {
            stmt.bindString(4, inventoryParentId);
        }
 
        String equipmentParentId = entity.getEquipmentParentId();
        if (equipmentParentId != null) {
            stmt.bindString(5, equipmentParentId);
        }
 
        String equipmentChildId = entity.getEquipmentChildId();
        if (equipmentChildId != null) {
            stmt.bindString(6, equipmentChildId);
        }
 
        String inFactoryDate = entity.getInFactoryDate();
        if (inFactoryDate != null) {
            stmt.bindString(7, inFactoryDate);
        }
 
        String assetsCode = entity.getAssetsCode();
        if (assetsCode != null) {
            stmt.bindString(8, assetsCode);
        }
 
        String outFactoryCode = entity.getOutFactoryCode();
        if (outFactoryCode != null) {
            stmt.bindString(9, outFactoryCode);
        }
 
        String depreciationStartingDate = entity.getDepreciationStartingDate();
        if (depreciationStartingDate != null) {
            stmt.bindString(10, depreciationStartingDate);
        }
 
        String costCenter = entity.getCostCenter();
        if (costCenter != null) {
            stmt.bindString(11, costCenter);
        }
 
        String declarationNum = entity.getDeclarationNum();
        if (declarationNum != null) {
            stmt.bindString(12, declarationNum);
        }
 
        String EPCode = entity.getEPCode();
        if (EPCode != null) {
            stmt.bindString(13, EPCode);
        }
 
        String factory = entity.getFactory();
        if (factory != null) {
            stmt.bindString(14, factory);
        }
 
        String equipmentName = entity.getEquipmentName();
        if (equipmentName != null) {
            stmt.bindString(15, equipmentName);
        }
        stmt.bindLong(16, entity.getStatus());
 
        String scanTime = entity.getScanTime();
        if (scanTime != null) {
            stmt.bindString(17, scanTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InventoryDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getInventoryHdrIdInSQLite());
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(3, area);
        }
 
        String inventoryParentId = entity.getInventoryParentId();
        if (inventoryParentId != null) {
            stmt.bindString(4, inventoryParentId);
        }
 
        String equipmentParentId = entity.getEquipmentParentId();
        if (equipmentParentId != null) {
            stmt.bindString(5, equipmentParentId);
        }
 
        String equipmentChildId = entity.getEquipmentChildId();
        if (equipmentChildId != null) {
            stmt.bindString(6, equipmentChildId);
        }
 
        String inFactoryDate = entity.getInFactoryDate();
        if (inFactoryDate != null) {
            stmt.bindString(7, inFactoryDate);
        }
 
        String assetsCode = entity.getAssetsCode();
        if (assetsCode != null) {
            stmt.bindString(8, assetsCode);
        }
 
        String outFactoryCode = entity.getOutFactoryCode();
        if (outFactoryCode != null) {
            stmt.bindString(9, outFactoryCode);
        }
 
        String depreciationStartingDate = entity.getDepreciationStartingDate();
        if (depreciationStartingDate != null) {
            stmt.bindString(10, depreciationStartingDate);
        }
 
        String costCenter = entity.getCostCenter();
        if (costCenter != null) {
            stmt.bindString(11, costCenter);
        }
 
        String declarationNum = entity.getDeclarationNum();
        if (declarationNum != null) {
            stmt.bindString(12, declarationNum);
        }
 
        String EPCode = entity.getEPCode();
        if (EPCode != null) {
            stmt.bindString(13, EPCode);
        }
 
        String factory = entity.getFactory();
        if (factory != null) {
            stmt.bindString(14, factory);
        }
 
        String equipmentName = entity.getEquipmentName();
        if (equipmentName != null) {
            stmt.bindString(15, equipmentName);
        }
        stmt.bindLong(16, entity.getStatus());
 
        String scanTime = entity.getScanTime();
        if (scanTime != null) {
            stmt.bindString(17, scanTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InventoryDetail readEntity(Cursor cursor, int offset) {
        InventoryDetail entity = new InventoryDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // inventoryHdrIdInSQLite
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // area
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // inventoryParentId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // equipmentParentId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // equipmentChildId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // inFactoryDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // assetsCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // outFactoryCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // depreciationStartingDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // costCenter
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // declarationNum
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // EPCode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // factory
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // equipmentName
            cursor.getInt(offset + 15), // status
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // scanTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InventoryDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInventoryHdrIdInSQLite(cursor.getLong(offset + 1));
        entity.setArea(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInventoryParentId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEquipmentParentId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEquipmentChildId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInFactoryDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAssetsCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOutFactoryCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDepreciationStartingDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCostCenter(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDeclarationNum(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEPCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFactory(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEquipmentName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStatus(cursor.getInt(offset + 15));
        entity.setScanTime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InventoryDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InventoryDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InventoryDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
